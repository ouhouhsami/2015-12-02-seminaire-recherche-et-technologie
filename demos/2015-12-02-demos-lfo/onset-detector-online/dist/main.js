'use strict';

var _Array$from = require('babel-runtime/core-js/array/from')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _wavesLfo = require('waves-lfo');

var _wavesLfo2 = _interopRequireDefault(_wavesLfo);

var _wavesUi = require('waves-ui');

var _wavesUi2 = _interopRequireDefault(_wavesUi);

var _wavesLoaders = require('waves-loaders');

var _wavesLoaders2 = _interopRequireDefault(_wavesLoaders);

navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

var ctx = new AudioContext();

function run(e) {
  // GLOBALS
  var waveformData = [];
  var markerData = [];

  var audioIn = ctx.createMediaStreamSource(e);

  var source = new _wavesLfo2['default'].sources.AudioInNode({
    ctx: ctx,
    src: audioIn,
    timeType: 'relative'
  });

  var framer = new _wavesLfo2['default'].operators.Framer({
    frameSize: 512
  });

  var minMax = new _wavesLfo2['default'].operators.MinMax();

  var waveform = new _wavesLfo2['default'].sinks.Waveform({
    duration: 4,
    canvas: document.querySelector('#canvas-1'),
    color: 'steelblue'
  });

  source.connect(framer);
  framer.connect(minMax);
  minMax.connect(waveform);

  // moving average 1
  var longMovingAverage = new _wavesLfo2['default'].operators.MovingAverage({ order: 30 });
  // moving average 2
  var shortMovingAverage = new _wavesLfo2['default'].operators.MovingAverage({ order: 10 });

  // difference
  var counter = 0;
  var stack = [];
  var diff = new _wavesLfo2['default'].operators.Noop();

  diff.process = function (time, frame, metaData) {
    var frameSize = this.outFrame.length;
    stack[counter] = frame;

    if (counter === 1) {
      for (var i = 0; i < frameSize; i++) {
        this.outFrame[i] = stack[1][i] - stack[0][i];
      }

      this.time = time;

      // reset
      stack.length = 0;
      this.output();
    }

    counter = (counter + 1) % 2;
  };

  var maxOptions = {
    frameSize: 1,
    type: 'vector',
    onProcess: function onProcess(time, frame, outFrame) {
      var max = -Infinity;
      var value = undefined;

      for (var i = 0, l = frame.length; i < l; i++) {
        value = frame[i];
        if (value > max) {
          max = value;
        }
      }

      outFrame[0] = max;
    }
  };

  var maxMA1 = new _wavesLfo2['default'].operators.Operator(maxOptions);
  var bpfMA1 = new _wavesLfo2['default'].sinks.Bpf({
    canvas: document.querySelector('#canvas-3'),
    duration: 4
  });

  var maxMA2 = new _wavesLfo2['default'].operators.Operator(maxOptions);
  var bpfMA2 = new _wavesLfo2['default'].sinks.Bpf({
    canvas: document.querySelector('#canvas-4'),
    duration: 4
  });

  // get max value from each frames
  var max = new _wavesLfo2['default'].operators.Operator(maxOptions);

  var bpf = new _wavesLfo2['default'].sinks.Bpf({
    canvas: document.querySelector('#canvas-2'),
    duration: 4
  });

  var $onset = document.querySelector('#onset');
  var $timestamps = document.querySelector('#timestamps');
  var threshold = 0.04;
  var active = false;

  // log all new onsets
  var logger = new _wavesLfo2['default'].operators.Noop();
  logger.process = function (time, frame) {
    if (frame[0] > threshold) {
      if (!active) {
        active = true;
        $onset.classList.add('active');
        $timestamps.innerHTML = '<p>' + time + '</p>' + $timestamps.innerHTML;
        // update markers
        markerData.push({ time: time });
      }
    } else {
      active = false;
      $onset.classList.remove('active');
    }
  };

  source.connect(longMovingAverage);
  source.connect(shortMovingAverage);

  longMovingAverage.connect(diff);
  shortMovingAverage.connect(diff);

  longMovingAverage.connect(maxMA1);
  maxMA1.connect(bpfMA1);

  shortMovingAverage.connect(maxMA2);
  maxMA2.connect(bpfMA2);

  diff.connect(max);
  max.connect(bpf);
  max.connect(logger);

  // UI PART
  var displayedDuration = 10;
  var width = 800;
  var pixelsPerSecond = width / displayedDuration;

  var timeline = new _wavesUi2['default'].core.Timeline(pixelsPerSecond, width);
  timeline.createTrack(document.querySelector('#axis'), 16, 'axis');
  timeline.createTrack(document.querySelector('#track'), 200, 'main');

  var axis = new _wavesUi2['default'].helpers.TimeAxisLayer();
  timeline.addLayer(axis, 'axis', 'default', true);

  var waveformLayer = new _wavesUi2['default'].core.Layer('entity', waveformData, {
    height: 200,
    sampleRate: ctx.sampleRate,
    yDomain: [-1, 1]
  });

  waveformLayer.setTimeContext(new _wavesUi2['default'].core.LayerTimeContext(timeline.timeContext));
  waveformLayer.configureShape(_wavesUi2['default'].shapes.Waveform, {
    y: function y(d) {
      return d;
    }
  }, {
    color: 'steelblue'
  });

  var markerLayer = new _wavesUi2['default'].helpers.MarkerLayer(markerData, {
    height: 200,
    displayHandlers: false
  }, {
    color: function color() {
      return 'red';
    },
    x: function x(d) {
      return d.time;
    }
  });

  timeline.addLayer(waveformLayer, 'main');
  timeline.addLayer(markerLayer, 'main');

  timeline.state = new _wavesUi2['default'].states.CenteredZoomState(timeline);

  timeline.tracks.render();

  // lfo to append values to the data of the waveform
  var appender = new _wavesLfo2['default'].operators.Noop();
  appender.process = function (time, frame) {
    Array.prototype.push.apply(waveformData, _Array$from(frame.values()));
  };

  source.connect(appender);

  var rAFId = undefined;
  // update waveformLayer
  function loop() {
    var bufferDuration = waveformData.length / ctx.sampleRate;

    if (bufferDuration > displayedDuration) {
      var decayTime = bufferDuration - displayedDuration;

      timeline.offset = -decayTime;
      waveformLayer.duration = bufferDuration;
      markerLayer.duration = bufferDuration;
    }

    timeline.tracks.render();
    timeline.tracks.update();

    rAFId = requestAnimationFrame(loop);
  };

  function reset() {
    timeline.offset = 0;
    timeline.zoom = 1;
    waveformLayer.duration = displayedDuration;
    markerLayer.duration = displayedDuration;
    waveformData.length = 0;
    markerData.length = 0;
    $timestamps.innerHTML = '';
  }

  // controls
  var $start = document.querySelector('#start');
  $start.addEventListener('click', function (e) {
    // reset timeline
    reset();
    loop();

    source.start();
  });

  var $stop = document.querySelector('#stop');
  $stop.addEventListener('click', function (e) {
    source.stop();
    cancelAnimationFrame(rAFId);
  });
}

navigator.getUserMedia({ audio: true }, run, function (err) {
  console.error(err.stack);
});
//# sourceMappingURL=data:application/json;base64,